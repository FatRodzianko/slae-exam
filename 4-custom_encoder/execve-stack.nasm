; HelloWorld.asm
; Author: TrulyOutrageous

global _start

section .text
_start:

	; building the execve syscall by building it all on the stack	

	;push the dword of nulls onto the stack
	xor eax,eax
	push eax

	;push the string of "///bin/bash" onto the stack. Extra slashes to pad out the string to a multiple of four
	push 0x68736162
	push 0x2f6e6962
	push 0x2f2f2f2f

	; ////bin/bash is on the stack, at the ESP register. So, to get the address of the location of the string into ebx, mov esp into ebx
	mov ebx, esp

	; push another null to get EDX to point to a memory address that is a dword of nulls
	push eax
	mov edx, esp

	; now for ecx, we need the address of EBX on the stack
	push ebx
	mov ecx, esp

	; make the syscall
	mov al, 0xb
	int 0x80

	;execve does not require exit code. Program launched by execve will handle the exit

